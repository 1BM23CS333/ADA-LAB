#include <stdio.h>
#include <limits.h>

#define MAX_VERTICES 100
#define MAX_EDGES 1000

// Structure to represent an edge
struct Edge {
    int src, dest, weight;
};

// Bellman-Ford Algorithm
void shortestPath(int vertices, int edgesCount, struct Edge edges[], int source) {
    int distance[MAX_VERTICES];

    // Initialize all distances to INFINITY
    for (int i = 0; i < vertices; i++)
        distance[i] = INT_MAX;
    distance[source] = 0;

    // Relax all edges |V| - 1 times
    for (int i = 1; i <= vertices - 1; i++) {
        for (int j = 0; j < edgesCount; j++) {
            int u = edges[j].src;
            int v = edges[j].dest;
            int w = edges[j].weight;
            if (distance[u] != INT_MAX && distance[u] + w < distance[v])
                distance[v] = distance[u] + w;
        }
    }

    // Print shortest distances
    printf("\nVertex\tDistance from Source %d\n", source);
    for (int i = 0; i < vertices; i++) {
        if (distance[i] == INT_MAX)
            printf("%d\tINFINITY\n", i);
        else
            printf("%d\t%d\n", i, distance[i]);
    }
}

int main() {
    int vertices, edgesCount;
    struct Edge edges[MAX_EDGES];

    printf("Enter number of vertices: ");
    scanf("%d", &vertices);

    printf("Enter number of edges: ");
    scanf("%d", &edgesCount);

    printf("Enter edges (source destination weight):\n");
    for (int i = 0; i < edgesCount; i++) {
        printf("Edge %d: ", i + 1);
        scanf("%d %d %d", &edges[i].src, &edges[i].dest, &edges[i].weight);
    }

    int source;
    printf("Enter source vertex: ");
    scanf("%d", &source);

    shortestPath(vertices, edgesCount, edges, source);

    return 0;
}
