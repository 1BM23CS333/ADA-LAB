#include <stdio.h>
#include <math.h>

int max(int a, int b) {
    return (a > b) ? a : b;
}

// Function to calculate the total weight and value of a subset
void evaluateSubset(int n, int weights[], int values[], int subset, int capacity, int *maxValue) {
    int totalWeight = 0;
    int totalValue = 0;

    for (int i = 0; i < n; i++) {
        if (subset & (1 << i)) { // Check if the i-th item is included
            totalWeight += weights[i];
            totalValue += values[i];
        }
    }

    if (totalWeight <= capacity && totalValue > *maxValue) {
        *maxValue = totalValue;
    }
}

int main() {
    int n, capacity;

    // Input number of items and capacity
    printf("Enter the number of items: ");
    scanf("%d", &n);

    int weights[n], values[n];

    printf("Enter the weights of the items:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &weights[i]);
    }

    printf("Enter the values of the items:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &values[i]);
    }

    printf("Enter the capacity of the knapsack: ");
    scanf("%d", &capacity);

    int maxValue = 0;
    int totalSubsets = pow(2, n); // Total combinations

    // Try every subset
    for (int subset = 0; subset < totalSubsets; subset++) {
        evaluateSubset(n, weights, values, subset, capacity, &maxValue);
    }

    printf("Maximum value that can be carried: %d\n", maxValue);

    return 0;
}

